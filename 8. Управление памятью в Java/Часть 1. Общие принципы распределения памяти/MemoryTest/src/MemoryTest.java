import java.util.ArrayList;

/**
 *  Проблемы выделения памяти
 *  1. Поиск участка памяти необходимого размера требует времени.
 *  2. Ошибки при использовании указателей вызывают перекрытия блоков памяти - ситуация,
 *     когда одна и та же область памяти используется для хранения разных структур данных.
 *  3. Утечка памяти - ситуация, когда по какой-либо причине не была освобождена занятая память.
 *  4. Фрагментация памяти - ситуация, когда в процессе использования памяти она разбивается на мелкие части,
 *     среди которых можно не найти постоянного блока необходимого размера.
 *
 *  Способы управления памятью
 *  1. Статическое распределение памяти
 *      Другими словами, это память, выделяемая на этапе компиляции программы.
 *      Для глобальных переменных память выделяется таким же способом.
 *      Плюсы:
 *      - нет необходимости перераспределять память в процессе работы программы.
 *      - не возникают перекрытия блоков памяти.
 *      - не происходит утечки памяти, т.к. после завершения программы её память будет возвращена.
 *      - не происходит фрагментации памяти.
 *      Минусы:
 *      - невозможно гибко управлять памятью (программа может занимать больше памяти, чем ей необходимо в данный момент).
 *      - требования к памяти должны быть известны при создании программы.
 *
 *  2. Размещение в стековой памяти
 *      Примером использования стековой памяти являются локальные переменные в подпрограммах.
 *      Плюсы:
 *      - высокая скорость выделения памяти.
 *      - не происходит утечка памяти, потому что после завершения подпрограммы выделенный ей блок памяти будет возвращён.
 *      - не происходит фрагментация памяти.
 *      Минусы:
 *      - чрезмерное использование стековой памяти уменьшает глубину вложенности вызовов в рекурсивных алгоритмах.
 *      - некорректное использование указателей может вызывать перекрытие блоков памяти.
 *
 *  3. Динамические распределение памяти (куча)
 *      Данный способ выделяет блок памяти необходимого размера.
 *      Плюсы:
 *      - память можно выделять в любой момент времени и любого размера.
 *      Минусы:
 *      - возможно перекрытие блоков памяти.
 *      - возможна утечка памяти.
 *      - фрагментация памяти.
 *      - операция выделения блока памяти является сложной из-за анализа всех свободных блоков.
 *
 *  4. Управляемое динамическое распределение памяти (управляемая куча)
 *      Запрещается прямой доступ к памяти. Для работы с объектами используются ссылки, которые управляются JVM.
 *      Плюсы:
 *      - перекрытие блоков памяти исключено (благодаря контролю ссылок)
 *      - утечка памяти невозможно
 *      - эффективная борьба с фрагментацией
 *      Минусы:
 *      - снижается быстродействие из-за того, что JVM занимается распределением памяти.
 *
 *  Сборка мусора (Garbage collector)
 *      Освобождение памяти - одна из основных задач, которую выполняет JVM при управляемом динамическом распределении памяти.
 *
 *  Алгоритмы сборки мусора
 *  TODO: Доделать алгоритмы сборки мусора
 */

public class MemoryTest {
    public static void main(String[] args) {
        ArrayList list = new ArrayList(200);
        printMemUsage();
        for (int iIdx = 0; iIdx < 1000; iIdx++) {
            list.add(new int[1000000]);
            printMemUsage();
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Thread.interrupted();
            }
        }
    }

    public static void printMemUsage() {
        Runtime runtime = Runtime.getRuntime();
        System.out.printf("freeMemory  = %d\n", runtime.freeMemory());
        System.out.printf("maxMemory   = %d\n", runtime.maxMemory());
        System.out.printf("totalMemory = %d\n", runtime.totalMemory());
        System.out.println();
    }

}